import streamlit as st
import fitz  # PyMuPDF
from docx import Document
from PIL import Image
import pytesseract
import io, re, json, time, os
import pandas as pd
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm

# ================
# CONFIG GLOBAL
# ================
st.set_page_config(
    page_title="EspritCareers",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Palette sombre "Esprit"
PRIMARY = "#E00000"     # rouge Esprit
BG      = "#0B0C10"
CARD    = "#0F1115"
BORDER  = "#1F2937"
TEXT    = "#E8EAED"
MUTED   = "#A1A7B0"

# Google Fonts (Inter)
st.markdown("""
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
""", unsafe_allow_html=True)

# CSS (dark, pro, align√© Esprit)
st.markdown(f"""
<style>
:root {{
  --primary:{PRIMARY}; --bg:{BG}; --card:{CARD}; --border:{BORDER};
  --text:{TEXT}; --muted:{MUTED};
}}
html, body, [class*="css"] {{
  background: var(--bg) !important; color: var(--text);
  font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
}}
/* Header "ruban" oblique rouge fa√ßon Esprit */
.ec-topbar {{
  position: relative; padding: 18px 20px; margin: 0 0 18px 0;
  background: linear-gradient(90deg, rgba(224,0,0,.95) 0%, rgba(224,0,0,.85) 70%, rgba(224,0,0,.65) 100%);
  border-bottom: 1px solid #7a0c0c;
  clip-path: polygon(0 0, 100% 0, 92% 100%, 0 100%);
}}
.ec-topbar .brand {{
  display:flex; align-items:center; gap:14px;
}}
.ec-topbar img {{ height:32px; }}
.ec-topbar .title {{ font-size:18px; font-weight:600; letter-spacing:.2px; }}
.ec-topbar .subtitle {{ font-size:12px; color:#fff; opacity:.9; margin-top:2px; }}

/* Onglets sobres */
.stTabs [role="tablist"] {{
  border-bottom: 1px solid var(--border);
  gap: 6px; padding: 0 6px;
}}
.stTabs [role="tab"] {{
  color: var(--muted); border: 1px solid var(--border); border-bottom: none;
  background: #0c0f14; padding: 8px 14px; border-top-left-radius:10px; border-top-right-radius:10px;
}}
.stTabs [aria-selected="true"] {{
  color: #fff; background: #12161d; border-color: #2a3240;
}}

/* Cartes */
.ec-card {{
  background: var(--card); border: 1px solid var(--border);
  border-radius: 14px; padding: 16px 16px 12px; margin-bottom: 14px;
}}
.ec-title {{ font-size: 18px; font-weight: 600; margin-bottom: 6px; }}
.ec-sub   {{ color: var(--muted); font-size: 13px; margin-bottom: 10px; }}

/* Boutons */
div.stButton > button:first-child {{
  background: var(--primary) !important; color:#fff !important; border:0 !important;
  border-radius: 10px !important; padding:8px 14px !important;
}}

/* Inputs */
.stTextInput > div > div > input,
.stTextArea textarea, .stSelectbox div[data-baseweb="select"] > div {{
  background:#0e1117 !important; color:#e8eaed !important;
  border:1px solid var(--border) !important; border-radius:10px !important;
}}

/* Tables & m√©triques */
.stDataFrame, .stTable {{ color: var(--text) !important; }}
</style>
""", unsafe_allow_html=True)

# ==============================
# HEADER (ruban + logo)
# ==============================
st.markdown('<div class="ec-topbar">', unsafe_allow_html=True)
# ==============================
# INTRODUCTION
# ==============================
st.markdown('<div class="ec-card">', unsafe_allow_html=True)
st.markdown("""
### üéì √Ä propos d‚ÄôEspritCareers
EspritCareers est une interface intelligente d√©velopp√©e au sein du **P√¥le Employabilit√© d‚ÄôESPRIT School of Business**, dans le cadre du projet de fin d‚Äô√©tudes *Business Analytics & IA G√©n√©rative*.

Elle vise √† :
- **Accompagner les √©tudiants et dipl√¥m√©s** dans l‚Äôoptimisation de leurs candidatures.  
- **Automatiser** l‚Äô√©valuation des **CV**, **lettres de motivation**, et **pr√©parer les entretiens** via une IA explicable.  
- **Renforcer la visibilit√© des forces et des axes d‚Äôam√©lioration** gr√¢ce √† un scoring transparent.

üí° Ce d√©monstrateur illustre l‚Äôint√©gration de **l‚ÄôIA g√©n√©rative** dans les processus d‚Äôemployabilit√© et d‚Äôorientation professionnelle.
""")
st.markdown('</div>', unsafe_allow_html=True)

col_logo, col_titles = st.columns([0.1, 0.9])
with col_logo:
    logo_path = "assets/esprit_logo.png"
    if os.path.exists(logo_path):
        try:
            st.image(logo_path, use_container_width=True)
        except Exception:
            st.write("")  # logo optionnel
with col_titles:
    st.markdown('<div class="brand"><div class="title">EspritCareers</div></div>', unsafe_allow_html=True)
    st.markdown('<div class="subtitle">P√¥le Employabilit√© ‚Äî Analyse de CV, Lettre & Simulation d‚Äôentretien</div>', unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

# ==============================
# HELPERS (extraction & scoring)
# ==============================
def safe_ocr(image_bytes: bytes, lang: str = "fra+eng") -> str:
    """OCR robuste: si Tesseract indisponible, retourne cha√Æne vide sans planter."""
    try:
        img = Image.open(io.BytesIO(image_bytes))
        return pytesseract.image_to_string(img, lang=lang)
    except Exception:
        return ""

def extract_text_from_file(uploaded_file):
    """Retourne (texte, used_ocr: bool). Pas de crash si OCR indispo."""
    name = uploaded_file.name.lower()
    data = uploaded_file.read()
    if name.endswith(".pdf"):
        doc = fitz.open(stream=data, filetype="pdf")
        text_total, used_ocr = "", False
        for page in doc:
            t = page.get_text().strip()
            if not t:
                try:
                    pix = page.get_pixmap(dpi=300)
                    ocr_txt = safe_ocr(pix.tobytes())
                    if ocr_txt:
                        t = ocr_txt; used_ocr = True
                except Exception:
                    pass
            text_total += ("\n" + (t or ""))
        return text_total.strip(), used_ocr
    elif name.endswith(".docx"):
        docx = Document(io.BytesIO(data))
        return "\n".join(p.text for p in docx.paragraphs), False
    elif name.endswith((".png", ".jpg", ".jpeg")):
        t = safe_ocr(data)
        return t.strip(), True if t else False
    else:
        return "", False

STOPWORDS = set("""
le la les un une des et √† de du pour par ou au aux en avec sur sous dans d' l'
the a an to of in on at for from by with as is are
""".split())

def normalize(t: str) -> str:
    return re.sub(r"[^a-zA-Z√Ä-√ø0-9\s\-]", " ", t.lower())

def keyword_candidates(text, top=30):
    tokens = re.findall(r"[a-zA-Z√Ä-√ø0-9\+\#\.]{2,}", text.lower())
    tokens = [t for t in tokens if t not in STOPWORDS and not t.isdigit()]
    if not tokens:
        return []
    freq = pd.Series(tokens).value_counts().head(top)
    return list(freq.index)

def build_job_keywords(job_text: str):
    cands = keyword_candidates(job_text, top=30)
    must = cands[:10]
    nice = cands[10:20]
    return {
        "must_have": must,
        "nice_to_have": nice,
        "weights": {"mh":0.5,"nh":0.2,"struct":0.15,"quant":0.1,"format":0.05}
    }

def keyword_score(cv_text, must_have, nice_to_have):
    t = normalize(cv_text)
    smh = sum(1 for k in must_have if k and k.lower() in t) / max(1, len(must_have))
    snh = sum(1 for k in nice_to_have if k and k.lower() in t) / max(1, len(nice_to_have))
    return smh, snh

def quantify_score(cv_text):
    nums = re.findall(r"\b\d+(\.\d+)?%?|\b\d{4}\b", cv_text)
    return min(1.0, len(nums)/8)

def structure_score(cv_text):
    sec = ["profil","summary","exp√©rience","experience","formation","education","comp√©tences","skills","projets","projects"]
    t = normalize(cv_text)
    hits = sum(1 for s in sec if s in t)
    return min(1.0, hits/6)

def ats_score(cv_text, job_kw):
    mh, nh = job_kw["must_have"], job_kw["nice_to_have"]
    w = job_kw.get("weights", {"mh":0.5,"nh":0.2,"struct":0.15,"quant":0.1,"format":0.05})
    smh, snh = keyword_score(cv_text, mh, nh)
    sst = structure_score(cv_text)
    sq  = quantify_score(cv_text)
    sfo = 1.0  # placeholder
    total = 100*(w["mh"]*smh + w["nh"]*snh + w["struct"]*sst + w["quant"]*sq + w["format"]*sfo)
    breakdown = {
        "Must-have": round(100*w["mh"]*smh,1),
        "Nice-to-have": round(100*w["nh"]*snh,1),
        "Structure": round(100*w["struct"]*sst,1),
        "Quantification": round(100*w["quant"]*sq,1),
        "Mise en forme": round(100*w["format"]*sfo,1)
    }
    return round(total,1), breakdown

def suggest_improvements(cv_text, job_kw):
    t = normalize(cv_text)
    missing_mh = [k for k in job_kw["must_have"] if k and k.lower() not in t][:6]
    suggestions = []
    if missing_mh:
        suggestions.append(f"Ajouter/renforcer les mots-cl√©s essentiels : {', '.join(missing_mh)}.")
    if quantify_score(cv_text) < 0.6:
        suggestions.append("Quantifier les r√©alisations avec des chiffres, % et d√©lais.")
    if structure_score(cv_text) < 0.8:
        suggestions.append("V√©rifier les sections : Profil, Exp√©rience, Formation, Comp√©tences, Projets.")
    suggestions += [
        "Utiliser des verbes d‚Äôaction (con√ßu, d√©ploy√©, optimis√©, automatis√©, n√©goci√©).",
        "R√©sum√© 4‚Äì5 lignes, orient√© r√©sultats et outils."
    ]
    return suggestions[:5]

def tone_heuristic(letter_text):
    t = letter_text.lower()
    score_formel = int(any(x in t for x in ["madame","monsieur","candidature","motivation","cordialement"])) * 50
    score_concret = min(50, len(re.findall(r"\b\d+%?|\b(kpi|roi|budget|projet|deadline)\b", t))*5)
    return min(100, score_formel + score_concret)

# ==============================
# EXPORT PDF (rapport simple)
# ==============================
def export_pdf_report(filename: str, title: str, fields: dict):
    """G√©n√®re un PDF texte simple (fiable sur Streamlit Cloud)."""
    path = f"/tmp/{filename}"
    c = canvas.Canvas(path, pagesize=A4)
    width, height = A4
    x, y = 2*cm, height - 2.5*cm
    c.setTitle(title)
    c.setFont("Helvetica-Bold", 16)
    c.drawString(x, y, title)
    y -= 1.0*cm
    c.setFont("Helvetica", 11)
    for k, v in fields.items():
        line = f"{k}: {v}"
        for chunk in [line[i:i+95] for i in range(0, len(line), 95)]:
            c.drawString(x, y, chunk)
            y -= 0.7*cm
            if y < 2*cm:
                c.showPage()
                y = height - 2.5*cm
                c.setFont("Helvetica", 11)
    c.showPage()
    c.save()
    with open(path, "rb") as f:
        return f.read()

# ==============================
# UI
# ==============================
tab_cv, tab_cover, tab_interview = st.tabs(["CV", "Lettre", "Entretien"])

# ---------------
# TAB CV
# ---------------
with tab_cv:
    st.markdown('<div class="ec-card">', unsafe_allow_html=True)
    st.markdown('<div class="ec-title">Analyse de CV (ATS)</div>', unsafe_allow_html=True)
    st.markdown('<div class="ec-sub">T√©l√©verser un CV et coller l‚Äôoffre de poste pour obtenir un score explicable.</div>', unsafe_allow_html=True)

    c1, c2 = st.columns([1,1])
    with c1:
        file_cv = st.file_uploader("CV (PDF, DOCX, Image)", type=["pdf","docx","png","jpg","jpeg"], key="cv")
    with c2:
        job_text = st.text_area("Offre de poste (copier/coller)", height=180)

    col_btn, _ = st.columns([0.25, 0.75])
    run_cv = col_btn.button("Analyser", use_container_width=True)

    if run_cv:
        if not file_cv or not job_text.strip():
            st.error("Veuillez ajouter un CV et l‚Äôoffre de poste.")
        else:
            text, used_ocr = extract_text_from_file(file_cv)
            if len(text) < 80:
                st.error("Le document semble vide ou illisible. Fournir un PDF/DOCX de meilleure qualit√©.")
            else:
                job_kw = build_job_keywords(job_text)
                score, breakdown = ats_score(text, job_kw)

                m1, m2, m3 = st.columns(3)
                covered = int(round(breakdown['Must-have']/50*len(job_kw['must_have']), 0))
                m1.metric("Score ATS", f"{score}/100")
                m2.metric("Essentiels", f"{covered}/{len(job_kw['must_have'])}")
                m3.metric("OCR", "Oui" if used_ocr else "Non")

                # Barre de progression personnalis√©e
                st.markdown(
                    f"<div style='height:8px;background:#161a22;border:1px solid {BORDER};"
                    f"border-radius:20px;overflow:hidden'><div style='height:100%;width:{min(100,score)}%;"
                    f"background:{PRIMARY}'></div></div>",
                    unsafe_allow_html=True
                )

                st.markdown("**D√©tail des points**")
                dfb = pd.DataFrame({"Dimension": list(breakdown.keys()), "Points": list(breakdown.values())})
                st.dataframe(dfb, use_container_width=True)

                st.markdown("**Suggestions**")
                for s in suggest_improvements(text, job_kw):
                    st.markdown(f"- {s}")

                with st.expander("Texte extrait"):
                    st.text_area("CV (texte)", text, height=240)

                # Export PDF
                pdf_bytes = export_pdf_report(
                    filename="rapport_cv.pdf",
                    title="EspritCareers ‚Äî Rapport ATS",
                    fields={
                        "Score": f"{score}/100",
                        "Must-have": f"{breakdown['Must-have']}",
                        "Nice-to-have": f"{breakdown['Nice-to-have']}",
                        "Structure": f"{breakdown['Structure']}",
                        "Quantification": f"{breakdown['Quantification']}",
                        "Mise en forme": f"{breakdown['Mise en forme']}",
                        "OCR": "Oui" if used_ocr else "Non"
                    }
                )
                st.download_button("T√©l√©charger le rapport (PDF)", data=pdf_bytes,
                                   file_name="rapport_cv.pdf", mime="application/pdf")
    st.markdown('</div>', unsafe_allow_html=True)

# ---------------
# TAB LETTRE
# ---------------
with tab_cover:
    st.markdown('<div class="ec-card">', unsafe_allow_html=True)
    st.markdown('<div class="ec-title">Lettre de motivation ‚Äî Coh√©rence & Ton</div>', unsafe_allow_html=True)

    lc1, lc2 = st.columns([1,1])
    with lc1:
        file_letter = st.file_uploader("Lettre (PDF, DOCX, Image) ou coller le texte", type=["pdf","docx","png","jpg","jpeg"], key="cover")
        letter_text_input = st.text_area("Texte de la lettre", height=220)
    with lc2:
        job_text_cover = st.text_area("Offre (r√©f√©rence pour la coh√©rence)", height=220)
        run_letter = st.button("Analyser la lettre", use_container_width=True)

    if run_letter:
        if not file_letter and not letter_text_input.strip():
            st.error("Veuillez ajouter un fichier ou coller le texte de la lettre.")
        elif not job_text_cover.strip():
            st.error("Veuillez coller l‚Äôoffre pour √©valuer la coh√©rence.")
        else:
            letter_text = letter_text_input
            if file_letter:
                letter_text, _ = extract_text_from_file(file_letter)

            if len(letter_text) < 60:
                st.error("La lettre semble trop courte ou illisible.")
            else:
                kw_job = set(build_job_keywords(job_text_cover)["must_have"])
                overlap = [k for k in kw_job if k in normalize(letter_text)]
                coh = min(100, int(len(overlap)/max(1, len(kw_job))*100))
                ton = tone_heuristic(letter_text)

                cc1, cc2 = st.columns(2)
                cc1.metric("Coh√©rence vs offre", f"{coh}/100")
                cc2.metric("Ton & structure", f"{ton}/100")

                st.markdown(
                    f"<div style='height:8px;background:#161a22;border:1px solid {BORDER};"
                    f"border-radius:20px;overflow:hidden'><div style='height:100%;width:{min(100,int((coh+ton)/2))}%;"
                    f"background:{PRIMARY}'></div></div>",
                    unsafe_allow_html=True
                )

                st.markdown("**Recommandations**")
                if coh < 70:
                    st.markdown("- Renforcer l‚Äôalignement sur les mots-cl√©s et les missions de l‚Äôoffre.")
                if ton < 70:
                    st.markdown("- Renforcer le ton formel et ajouter des exemples chiffr√©s (r√©sultats, KPIs).")
                st.markdown("- Structure sugg√©r√©e : Introduction ‚Üí Valeur ajout√©e ‚Üí Exemples ‚Üí Conclusion polie.")

                with st.expander("Texte analys√©"):
                    st.text_area("Lettre", letter_text, height=240)

                # Export PDF lettre
                pdf_bytes = export_pdf_report(
                    filename="rapport_lettre.pdf",
                    title="EspritCareers ‚Äî Rapport Lettre",
                    fields={
                        "Coh√©rence": f"{coh}/100",
                        "Ton & structure": f"{ton}/100",
                        "Mots-cl√©s couverts": ", ".join(overlap) if overlap else "‚Äî"
                    }
                )
                st.download_button("T√©l√©charger le rapport (PDF)", data=pdf_bytes,
                                   file_name="rapport_lettre.pdf", mime="application/pdf")
    st.markdown('</div>', unsafe_allow_html=True)

# ---------------
# TAB ENTRETIEN
# ---------------
QUESTION_BANK = {
    "Business Analyst": {
        "QCM": [
            ("Quel livrable formalise les exigences fonctionnelles ?", ["SLA", "BRD", "SOW"], 1),
            ("Quel diagramme mod√©lise les interactions utilisateur-syst√®me ?", ["Use Case UML", "PERT", "Gantt"], 0),
            ("Quel artefact capture l‚Äôacceptation d‚Äôune user story ?", ["Definition of Ready", "Crit√®res d‚Äôacceptation", "Charte Projet"], 1),
            ("Quel outil pour cartographier un processus As-Is/To-Be ?", ["SIPOC/BPMN", "Ishikawa", "Pareto"], 0),
        ],
        "OPEN": [
            "D√©crivez un besoin ambigu clarifi√© et l‚Äôimpact sur le projet.",
            "Arbitrage de priorit√©s : d√©marche et crit√®res.",
            "Exemple d‚Äôanalyse ayant conduit √† une d√©cision mesurable."
        ]
    },
    "Data Analyst": {
        "QCM": [
            ("Quel join renvoie uniquement les correspondances ?", ["LEFT JOIN", "INNER JOIN", "FULL OUTER JOIN"], 1),
            ("Mesure de dispersion autour de la moyenne ?", ["Variance", "M√©diane", "Mode"], 0),
            ("Graphique conseill√© pour s√©rie temporelle ?", ["Histogramme", "Courbe", "Secteurs"], 1),
            ("Test pour comparer deux moyennes ?", ["Chi¬≤", "ANOVA √† 1 facteur", "t-test"], 2),
        ],
        "OPEN": [
            "D√©crivez un dashboard (KPI, utilisateurs, d√©cisions).",
            "Traitement des donn√©es manquantes et aberrantes.",
            "Exemple de mod√©lisation simple et validation."
        ]
    },
    "PMO": {
        "QCM": [
            ("Objectif principal d‚Äôun PMO ?", ["Gouvernance/standardisation", "Vente", "Juridique"], 0),
            ("Indicateur int√©gr√© co√ªt/d√©lai/port√©e ?", ["RACI", "EVM", "SIPOC"], 1),
            ("Qui priorise le backlog produit ?", ["Scrum Master", "Product Owner", "Sponsor"], 1),
            ("Document qui cadre le p√©rim√®tre initial ?", ["SOW/Charte Projet", "RONI", "RFP"], 0),
        ],
        "OPEN": [
            "Plan de rattrapage sur projet en d√©rive (m√©thode).",
            "Standardisation des reportings d‚Äôun portefeuille.",
            "Gestion des risques et escalade."
        ]
    },
    "Marketing": {
        "QCM": [
            ("Cadre pour la proposition de valeur ?", ["SWOT", "4P/7P", "JTBD"], 2),
            ("Canal mesurant l‚Äôintention active ?", ["SEO/SEA", "Affichage", "RP"], 0),
            ("KPI de fid√©lit√© ?", ["CAC", "CLV", "CPA"], 1),
            ("Exp√©rimentation pour optimiser un funnel ?", ["Test A/B", "Pareto", "PERT"], 0),
        ],
        "OPEN": [
            "Campagne pilot√©e et impact mesur√©.",
            "Approche d‚ÄôA/B test et d‚Äôattribution.",
            "Priorisation des segments et messages."
        ]
    },
    "Finance": {
        "QCM": [
            ("Etat pr√©sentant les flux de tr√©sorerie ?", ["Bilan", "Compte de r√©sultat", "Tableau des flux de tr√©sorerie"], 2),
            ("EBITDA signifie ?", ["R√©sultat brut d‚Äôexploitation", "R√©sultat net", "Chiffre d‚Äôaffaires"], 0),
            ("Indicateur de rentabilit√© d‚Äôinvestissement ?", ["IRR/TRI", "WACC", "VaR"], 0),
            ("Ratio de levier ?", ["Debt/EBITDA", "Gross Margin", "Current Ratio"], 0),
        ],
        "OPEN": [
            "Analyse de rentabilit√© et recommandations.",
            "Gestion d‚Äôun budget sous contrainte.",
            "Exemple de r√©duction de co√ªts mesurable."
        ]
    },
    "Supply Chain": {
        "QCM": [
            ("KPI fiabilit√© de service ?", ["OTIF", "Fill Rate", "Lead Time"], 0),
            ("M√©thode pour r√©duire gaspillages ?", ["Lean", "PERT", "CPM"], 0),
            ("But du S&OP ?", ["Aligner demande/offre", "Reporting RH", "Audit qualit√©"], 0),
            ("Stock cible calcul√© par ?", ["EOQ", "NPV", "ARPU"], 0),
        ],
        "OPEN": [
            "Optimisation d‚Äôun flux logistique et impact.",
            "Gestion d‚Äôune rupture critique fournisseur.",
            "Mise en place d‚Äôun processus S&OP."
        ]
    },
    "Ressources Humaines": {
        "QCM": [
            ("KPI de r√©tention ?", ["Turnover", "NPS", "ARPU"], 0),
            ("Document pour objectifs trimestriels ?", ["OKR", "SLA", "MoU"], 0),
            ("Risque majeur recrutement sans ATS ?", ["Time-to-hire √©lev√©", "CLV bas", "Churn client"], 0),
            ("Indicateur de performance RH global ?", ["Engagement", "E-NPS", "Tous"], 2),
        ],
        "OPEN": [
            "Onboarding standardis√© : √©tapes cl√©s.",
            "Am√©liorer la qualit√© des recrutements.",
            "Initiative RH √† impact mesurable."
        ]
    },
    "D√©veloppeur Python": {
        "QCM": [
            ("Type cl√©/valeur ?", ["list", "dict", "tuple"], 1),
            ("Structure FIFO ?", ["list", "deque", "set"], 1),
            ("Outil d‚Äôisolation des deps ?", ["virtualenv/venv", "cron", "make"], 0),
            ("Complexit√© d‚Äôun dict lookup ?", ["O(1) en moyenne", "O(n)", "O(log n)"], 0),
        ],
        "OPEN": [
            "Automatisation r√©alis√©e et gains.",
            "Assurance qualit√© (tests, linting).",
            "Optimisation de performance concr√®te."
        ]
    },
    "Design / UI": {
        "QCM": [
            ("Principe pour hi√©rarchie visuelle ?", ["Gestalt", "DRY", "SOLID"], 0),
            ("Mesure d‚Äôutilisabilit√© ?", ["SUS", "NPS", "CLV"], 0),
            ("Pattern pour √©tats de chargement ?", ["Skeleton", "Dropdown", "Modal"], 0),
        ],
        "OPEN": [
            "Processus de design (recherche ‚Üí prototypage ‚Üí test).",
            "Am√©lioration mesurable d‚Äôun parcours.",
            "Gestion de la coh√©rence (Design System)."
        ]
    }
}

with tab_interview:
    st.markdown('<div class="ec-card">', unsafe_allow_html=True)
    st.markdown('<div class="ec-title">Simulation d‚Äôentretien</div>', unsafe_allow_html=True)
    colA, colB = st.columns([1,1])
    with colA:
        domain = st.selectbox("Domaine", list(QUESTION_BANK.keys()))
    with colB:
        level = st.selectbox("Niveau", ["Junior", "Interm√©diaire"])
    add_focus = st.text_input("Focus (mots-cl√©s s√©par√©s par des virgules, optionnel)")

    gen_btn = st.button("G√©n√©rer les questions", use_container_width=True)

    if gen_btn:
        bank = QUESTION_BANK[domain]

        st.markdown("**QCM**")
        table_rows = []
        for i, (q, options, correct_idx) in enumerate(bank["QCM"], start=1):
            st.write(f"{i}. {q}")
            choice = st.radio("R√©ponse", options, key=f"{domain}_qcm_{i}")
            if st.button(f"V√©rifier {i}", key=f"chk_{domain}_{i}"):
                if options.index(choice) == correct_idx:
                    st.success("Correct")
                else:
                    st.error(f"Mauvaise r√©ponse. Bonne r√©ponse : {options[correct_idx]}")
            table_rows.append({"Question": q, "Options": " | ".join(options), "Bonne r√©ponse": options[correct_idx]})
        if table_rows:
            st.dataframe(pd.DataFrame(table_rows), use_container_width=True)

        st.markdown("**Questions ouvertes (guide)**")
        for j, q in enumerate(bank["OPEN"], start=1):
            st.markdown(f"- {q}")

        st.info("Conseil : r√©pondre selon STAR (Situation, T√¢che, Action, R√©sultat) et quantifier l‚Äôimpact.")
